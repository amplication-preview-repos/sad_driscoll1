/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostAnalyticsService } from "../postAnalytics.service";
import { PostAnalyticsCreateInput } from "./PostAnalyticsCreateInput";
import { PostAnalytics } from "./PostAnalytics";
import { PostAnalyticsFindManyArgs } from "./PostAnalyticsFindManyArgs";
import { PostAnalyticsWhereUniqueInput } from "./PostAnalyticsWhereUniqueInput";
import { PostAnalyticsUpdateInput } from "./PostAnalyticsUpdateInput";

export class PostAnalyticsControllerBase {
  constructor(protected readonly service: PostAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostAnalytics })
  async createPostAnalytics(
    @common.Body() data: PostAnalyticsCreateInput
  ): Promise<PostAnalytics> {
    return await this.service.createPostAnalytics({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostAnalytics] })
  @ApiNestedQuery(PostAnalyticsFindManyArgs)
  async postAnalyticsItems(
    @common.Req() request: Request
  ): Promise<PostAnalytics[]> {
    const args = plainToClass(PostAnalyticsFindManyArgs, request.query);
    return this.service.postAnalyticsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postAnalytics(
    @common.Param() params: PostAnalyticsWhereUniqueInput
  ): Promise<PostAnalytics | null> {
    const result = await this.service.postAnalytics({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostAnalytics(
    @common.Param() params: PostAnalyticsWhereUniqueInput,
    @common.Body() data: PostAnalyticsUpdateInput
  ): Promise<PostAnalytics | null> {
    try {
      return await this.service.updatePostAnalytics({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostAnalytics(
    @common.Param() params: PostAnalyticsWhereUniqueInput
  ): Promise<PostAnalytics | null> {
    try {
      return await this.service.deletePostAnalytics({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
