/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Reader as PrismaReader } from "@prisma/client";

export class ReaderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReaderCountArgs, "select">): Promise<number> {
    return this.prisma.reader.count(args);
  }

  async readers<T extends Prisma.ReaderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReaderFindManyArgs>
  ): Promise<PrismaReader[]> {
    return this.prisma.reader.findMany<Prisma.ReaderFindManyArgs>(args);
  }
  async reader<T extends Prisma.ReaderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReaderFindUniqueArgs>
  ): Promise<PrismaReader | null> {
    return this.prisma.reader.findUnique(args);
  }
  async createReader<T extends Prisma.ReaderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReaderCreateArgs>
  ): Promise<PrismaReader> {
    return this.prisma.reader.create<T>(args);
  }
  async updateReader<T extends Prisma.ReaderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReaderUpdateArgs>
  ): Promise<PrismaReader> {
    return this.prisma.reader.update<T>(args);
  }
  async deleteReader<T extends Prisma.ReaderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReaderDeleteArgs>
  ): Promise<PrismaReader> {
    return this.prisma.reader.delete(args);
  }
}
