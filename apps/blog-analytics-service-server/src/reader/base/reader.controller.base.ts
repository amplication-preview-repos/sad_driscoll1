/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReaderService } from "../reader.service";
import { ReaderCreateInput } from "./ReaderCreateInput";
import { Reader } from "./Reader";
import { ReaderFindManyArgs } from "./ReaderFindManyArgs";
import { ReaderWhereUniqueInput } from "./ReaderWhereUniqueInput";
import { ReaderUpdateInput } from "./ReaderUpdateInput";

export class ReaderControllerBase {
  constructor(protected readonly service: ReaderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reader })
  async createReader(@common.Body() data: ReaderCreateInput): Promise<Reader> {
    return await this.service.createReader({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Reader] })
  @ApiNestedQuery(ReaderFindManyArgs)
  async readers(@common.Req() request: Request): Promise<Reader[]> {
    const args = plainToClass(ReaderFindManyArgs, request.query);
    return this.service.readers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reader(
    @common.Param() params: ReaderWhereUniqueInput
  ): Promise<Reader | null> {
    const result = await this.service.reader({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReader(
    @common.Param() params: ReaderWhereUniqueInput,
    @common.Body() data: ReaderUpdateInput
  ): Promise<Reader | null> {
    try {
      return await this.service.updateReader({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reader })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReader(
    @common.Param() params: ReaderWhereUniqueInput
  ): Promise<Reader | null> {
    try {
      return await this.service.deleteReader({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
